{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.3.8",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@azure/event-hubs!",
  "docComment": "",
  "name": "@azure/event-hubs",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@azure/event-hubs!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!BatchOptions:interface",
          "docComment": "/**\n * The set of options to configure the `createBatch` operation on the `EventProducer`. - `partitionKey` : A value that is hashed to produce a partition assignment. Not applicable if the `EventHubProducer` was created using a `partitionId`. - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached. - `abortSignal` : A signal the request to cancel the send operation.\n *\n * Example usage:\n * ```js\n * {\n *     partitionKey: 'foo',\n *     maxSizeInBytes: 1024 * 1024 // 1 MB\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "BatchOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BatchOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!BatchOptions#abortSignal:member",
              "docComment": "/**\n * @property An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "abortSignal",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!BatchOptions#maxSizeInBytes:member",
              "docComment": "/**\n * @property The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxSizeInBytes"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxSizeInBytes",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!BatchOptions#partitionKey:member",
              "docComment": "/**\n * @property A value that is hashed to produce a partition assignment. It guarantees that messages with the same partitionKey end up in the same partition. Specifying this will throw an error if the producer was created using a `paritionId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionKey"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionKey",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!Checkpoint:interface",
          "docComment": "/**\n * A checkpoint is meant to represent the last successfully processed event by the user from a particular partition of a consumer group in an Event Hub instance.\n *\n * When the `updateCheckpoint()` method on the `PartitionContext` class is called by the user, a `Checkpoint` is created internally. It is then stored in the storage solution implemented by the `PartitionManager` chosen by the user when creating an `EventProcessor`.\n *\n * Users are never expected to interact with `Checkpoint` directly. This interface exists to support the internal workings of `EventProcessor` and `PartitionManager`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Checkpoint"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Checkpoint",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#consumerGroupName:member",
              "docComment": "/**\n * @property The consumer group name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "consumerGroupName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#eTag:member",
              "docComment": "/**\n * @property The unique identifier for the operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "eTag"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eTag",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#eventHubName:member",
              "docComment": "/**\n * @property The event hub name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventHubName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#offset:member",
              "docComment": "/**\n * @property The offset of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#ownerId:member",
              "docComment": "/**\n * @property The unique identifier of the event processor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ownerId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ownerId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#partitionId:member",
              "docComment": "/**\n * @property The identifier of the Event Hub partition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!Checkpoint#sequenceNumber:member",
              "docComment": "/**\n * @property The sequence number of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@azure/event-hubs!CloseReason:enum",
          "docComment": "/**\n * An enum representing the different reasons for an `EventProcessor` to stop processing events from a partition in a consumer group of an Event Hub instance.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "CloseReason"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CloseReason",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@azure/event-hubs!CloseReason.EventHubException:member",
              "docComment": "/**\n * The PartitionProcessor was shutdown due to some internal or service exception.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "EventHubException"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"EventHubException\""
                }
              ],
              "releaseTag": "Public",
              "name": "EventHubException",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@azure/event-hubs!CloseReason.OwnershipLost:member",
              "docComment": "/**\n * Ownership of the partition was lost or transitioned to a new processor instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "OwnershipLost"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"OwnershipLost\""
                }
              ],
              "releaseTag": "Public",
              "name": "OwnershipLost",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@azure/event-hubs!CloseReason.Shutdown:member",
              "docComment": "/**\n * The EventProcessor was shutdown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Shutdown"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"Shutdown\""
                }
              ],
              "releaseTag": "Public",
              "name": "Shutdown",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventData:interface",
          "docComment": "/**\n * `EventData` is the interface that describes the event data to be sent to Event Hub. A simple instance can be `{ body: \"your-data\" }`.  @interface\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventData"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventData#body:member",
              "docComment": "/**\n * @property The message body that needs to be sent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "body"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventData#properties:member",
              "docComment": "/**\n * @property Set of key value pairs that can be used to set properties specific to user application.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "properties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!EventDataBatch:class",
          "docComment": "/**\n * A class representing a batch of events which can be passed to the `send` method of a `EventProducer` instance. This batch is ensured to be under the maximum message size supported by Azure Event Hubs service.\n *\n * Use `createBatch()` method on the `EventHubProducer` to create an instance of `EventDataBatch` instead of using `new EventDataBatch()`. You can specify an upper limit for the size of the batch via options when calling `createBatch()`.\n *\n * Use the `tryAdd` function on the EventDataBatch to add events to the batch. This method will return `false` after the upper limit is reached, therefore check the result before calling `tryAdd()` again.  @class\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `EventDataBatch` class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "EventDataBatch"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventDataBatch",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventDataBatch#batchMessage:member",
              "docComment": "/**\n * @property Represents the single AMQP message which is the result of encoding all the events added into the `EventDataBatch` instance.\n *\n * This is not meant for the user to use directly.\n *\n * When the `EventDataBatch` instance is passed to the `send()` method on the `EventHubProducer`, this single batched AMQP message is what gets sent over the wire to the service.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "batchMessage"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "batchMessage",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventDataBatch#count:member",
              "docComment": "/**\n * @property Number of events in the `EventDataBatch` instance.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "count"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventDataBatch#partitionKey:member",
              "docComment": "/**\n * @property The partitionKey set during `EventDataBatch` creation. This value is hashed to produce a partition assignment when the producer is created without a `partitionId`\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "partitionKey"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionKey",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventDataBatch#sizeInBytes:member",
              "docComment": "/**\n * @property Size of the `EventDataBatch` instance after the events added to it have been encoded into a single AMQP message.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "sizeInBytes"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sizeInBytes",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventDataBatch#tryAdd:member(1)",
              "docComment": "/**\n * Tries to add an event data to the batch if permitted by the batch's size limit. **NOTE**: Always remember to check the return value of this method, before calling it again for the next event.\n *\n * @param  - eventData An individual event data object.\n *\n * @returns A boolean value indicating if the event data has been added to the batch or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "tryAdd"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "eventData"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventData"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventData",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "tryAdd"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!EventHubClient:class",
          "docComment": "/**\n * @class The client is the main point of interaction with Azure Event Hubs service. It offers connection to a specific Event Hub within the Event Hubs namespace along with operations for sending event data, receiving events, and inspecting the connected Event Hub.\n *\n * There are multiple ways to create an `EventHubClient` - Use the connection string from the SAS policy created for your Event Hub instance. - Use the connection string from the SAS policy created for your Event Hub namespace, and the name of the Event Hub instance - Use the fully qualified domain name of your Event Hub namespace like `<yournamespace>.servicebus.windows.net`, and a credentials object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "EventHubClient"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubClient",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/event-hubs!EventHubClient:constructor(1)",
              "docComment": "/**\n * @constructor Constructs a new instance of the `EventHubClient` class\n *\n * @param connectionString - The connection string to use for connecting to the Event Hubs namespace. It is expected that the shared key properties and the Event Hub path are contained in this connection string. e.g. 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.\n *\n * @param options - A set of options to apply when configuring the client. - `dataTransformer`: A set of `encode`/`decode` methods to be used to encode an event before sending to service and to decode the event received from the service - `userAgent` : A string to append to the built in user agent string that is passed as a connection property to the service. - `websocket` : The WebSocket constructor used to create an AMQP connection if you choose to make the connection over a WebSocket. - `webSocketConstructorOptions` : Options to pass to the Websocket constructor when you choose to make the connection over a WebSocket. - `retryOptions` : The retry options for all the operations on the client/producer/consumer. A simple usage can be `{ \"maxRetries\": 4 }`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "connectionString"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubClientOptions"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "connectionString",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/event-hubs!EventHubClient:constructor(2)",
              "docComment": "/**\n * @constructor Constructs a new instance of the `EventHubClient` class\n *\n * @param connectionString - The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub path, e.g. 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;'.\n *\n * @param eventHubName - The path of the specific Event Hub to connect the client to.\n *\n * @param options - A set of options to apply when configuring the client. - `dataTransformer`: A set of `encode`/`decode` methods to be used to encode an event before sending to service and to decode the event received from the service - `userAgent` : A string to append to the built in user agent string that is passed as a connection property to the service. - `websocket` : The WebSocket constructor used to create an AMQP connection if you choose to make the connection over a WebSocket. - `webSocketConstructorOptions` : Options to pass to the Websocket constructor when you choose to make the connection over a WebSocket. - `retryOptions` : The retry options for all the operations on the client/producer/consumer. A simple usage can be `{ \"maxRetries\": 4 }`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "connectionString"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubClientOptions"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "connectionString",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "eventHubName",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ]
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/event-hubs!EventHubClient:constructor(3)",
              "docComment": "/**\n * @constructor Constructs a new instance of the `EventHubClient` class\n *\n * @param host - The fully qualified host name for the Event Hubs namespace. This is likely to be similar to <yournamespace>.servicebus.windows.net\n *\n * @param eventHubName - The path of the specific Event Hub to connect the client to.\n *\n * @param credential - SharedKeyCredential object or your credential that implements the TokenCredential interface.\n *\n * @param options - A set of options to apply when configuring the client. - `dataTransformer`: A set of `encode`/`decode` methods to be used to encode an event before sending to service and to decode the event received from the service - `userAgent` : A string to append to the built in user agent string that is passed as a connection property to the service. - `websocket` : The WebSocket constructor used to create an AMQP connection if you choose to make the connection over a WebSocket. - `webSocketConstructorOptions` : Options to pass to the Websocket constructor when you choose to make the connection over a WebSocket. - `retryOptions` : The retry options for all the operations on the client/producer/consumer. A simple usage can be `{ \"maxRetries\": 4 }`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "host"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "credential"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TokenCredential"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubClientOptions"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "host",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "eventHubName",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "credential",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient#close:member(1)",
              "docComment": "/**\n * Closes the AMQP connection to the Event Hub instance, returning a promise that will be resolved when disconnection is completed.\n *\n * @returns Promise<void>\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection encounters an error while closing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "close"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient#createConsumer:member(1)",
              "docComment": "/**\n * Creates an Event Hub consumer that can receive events from a specific Event Hub partition, in the context of a specific consumer group.\n *\n * Multiple consumers are allowed on the same partition in a consumer group. If there is a need to have an exclusive consumer for a partition in a consumer group, then specify the `ownerLevel` in the `options`. Exclusive consumers were previously referred to as \"Epoch Receivers\".\n *\n * @param  - consumerGroup The name of the consumer group this consumer is associated with. Events are read in the context of this group. You can get this information from Azure portal.\n *\n * @param  - partitionId The identifier of the Event Hub partition from which events will be received. You can get identifiers for all partitions by using the `getPartitionProperties` method on the `EventHubClient`.\n *\n * @param  - eventPosition The position within the partition where the consumer should begin reading events. The easiest way to create an instance of EventPosition is to use the static helpers on it like - `EventPosition.fromOffset()` - `EventPosition.fromSequenceNumber()` - `EventPosition.fromEnqueuedTime()` - `EventPosition.earliest()` - `EventPosition.latest()`\n *\n * @param  - options The set of options to apply when creating the consumer. - `ownerLevel` : A number indicating that the consumer intends to be an exclusive consumer of events resulting in other consumers to fail if their `ownerLevel` is lower or doesn't exist. - `retryOptions`: The retry options used to govern retry attempts when an issue is encountered while receiving events. A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection has been closed, create a new EventHubClient.\n *\n * @throws\n *\n * {TypeError} Thrown if a required parameter is missing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "createConsumer"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroup"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "eventPosition"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventPosition"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubConsumerOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubConsumer"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "consumerGroup",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "partitionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "eventPosition",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 17
                  }
                }
              ],
              "name": "createConsumer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient.createFromIotHubConnectionString:member(1)",
              "docComment": "/**\n * Creates an EventHubClient from connection string.\n *\n * @param iothubConnectionString - Connection string of the form 'HostName=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'.\n *\n * @param  - [options] Options that can be provided during client creation.\n *\n * @returns - Promise<EventHubClient>.\n *\n * @throws\n *\n * {Error} Thrown if the iothubConnectionString is not provided as a string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "createFromIotHubConnectionString"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "iothubConnectionString"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubClientOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventHubClient"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "iothubConnectionString",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "createFromIotHubConnectionString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient#createProducer:member(1)",
              "docComment": "/**\n * Creates an Event Hub producer that can send events to the Event Hub. If `partitionId` is specified in the `options`, all event data sent using the producer will be sent to the specified partition. Otherwise, they are automatically routed to an available partition by the Event Hubs service.\n *\n * Automatic routing of partitions is recommended because: - The sending of events will be highly available. - The event data will be evenly distributed among all available partitions.\n *\n * @param  - options The set of options to apply when creating the producer. - `partitionId` : The identifier of the partition that the producer can be bound to. - `retryOptions` : The retry options used to govern retry attempts when an issue is encountered while sending events. A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * @returns EventHubProducer\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection has been closed, create a new EventHubClient.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "createProducer"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubProducerOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubProducer"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "createProducer"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubClient.defaultConsumerGroupName:member",
              "docComment": "/**\n * @property The name of the default consumer group in the Event Hubs service.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "defaultConsumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultConsumerGroupName",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubClient#eventHubName:member",
              "docComment": "/**\n * @property\n *\n * The name of the Event Hub instance for which this client is created.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventHubName",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient#getPartitionIds:member(1)",
              "docComment": "/**\n * Provides an array of partitionIds.\n *\n * @param  - abortSignal An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n *\n * @returns A promise that resolves with an Array of strings.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection has been closed, create a new EventHubClient.\n *\n * @throws\n *\n * {AbortError} Thrown if the operation is cancelled via the abortSignal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getPartitionIds"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array"
                },
                {
                  "kind": "Content",
                  "text": "<string>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "abortSignal",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getPartitionIds"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient#getPartitionProperties:member(1)",
              "docComment": "/**\n * Provides information about the specified partition.\n *\n * @param  - partitionId Partition ID for which partition information is required.\n *\n * @param  - abortSignal An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n *\n * @returns A promise that resoloves with PartitionProperties.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection has been closed, create a new EventHubClient.\n *\n * @throws\n *\n * {AbortError} Thrown if the operation is cancelled via the abortSignal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getPartitionProperties"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PartitionProperties"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "partitionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "abortSignal",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "getPartitionProperties"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubClient#getProperties:member(1)",
              "docComment": "/**\n * Provides the Event Hub runtime information.\n *\n * @param  - abortSignal An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n *\n * @returns A promise that resolves with EventHubProperties.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection has been closed, create a new EventHubClient.\n *\n * @throws\n *\n * {AbortError} Thrown if the operation is cancelled via the abortSignal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getProperties"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventHubProperties"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "abortSignal",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getProperties"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventHubClientOptions:interface",
          "docComment": "/**\n * Describes the options that can be provided while creating the EventHubClient. - `dataTransformer`: A set of `encode`/`decode` methods to be used to encode an event before sending to service and to decode the event received from the service - `userAgent` : A string to append to the built in user agent string that is passed as a connection property to the service. - `websocket` : The WebSocket constructor used to create an AMQP connection if you choose to make the connection over a WebSocket. - `webSocketConstructorOptions` : Options to pass to the Websocket constructor when you choose to make the connection over a WebSocket. - `retryOptions` : The retry options for all the operations on the client/producer/consumer. A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * Example usage:\n * ```js\n * {\n *     retryOptions: {\n *         maxRetries: 4\n *     }\n * }\n * ```\n *\n * @interface ClientOptions\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventHubClientOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubClientOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubClientOptions#dataTransformer:member",
              "docComment": "/**\n * @property The data transformer that will be used to encode and decode the sent and received messages respectively. If not provided then the `DefaultDataTransformer` is used which has the below `encode` & `decode` features - `encode`: - If event body is a Buffer, then the event is sent without any data transformation - Else, JSON.stringfy() is run on the body, and then converted to Buffer before sending the event - If JSON.stringify() fails at this point, the send operation fails too. - `decode` - The body receivied via the AMQP protocol is always of type Buffer - UTF-8 encoding is used to convert Buffer to string, and then JSON.parse() is run on it to get the event body - If the JSON.parse() fails at this point, then the originally received Buffer object is returned in the event body.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dataTransformer"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTransformer"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataTransformer",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubClientOptions#retryOptions:member",
              "docComment": "/**\n * @property The retry options for all the operations on the client/producer/consumer. This can be overridden by the retry options set on the producer and consumer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "retryOptions"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryOptions"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "retryOptions",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubClientOptions#userAgent:member",
              "docComment": "/**\n * @property The user agent that will be appended to the built in user agent string that is passed as a connection property to the Event Hubs service.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "userAgent"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "userAgent",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubClientOptions#webSocket:member",
              "docComment": "/**\n * @property The WebSocket constructor used to create an AMQP connection over a WebSocket. This option should be provided in the below scenarios: - The TCP port 5671 which is what is used by the AMQP connection to Event Hubs is blocked in your environment. - Your application needs to be run behind a proxy server - Your application needs to run in the browser and you want to provide your own choice of Websocket implementation instead of the built-in WebSocket in the browser.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "webSocket"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketImpl"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "webSocket",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubClientOptions#webSocketConstructorOptions:member",
              "docComment": "/**\n * @property Options to be passed to the WebSocket constructor when the underlying `rhea` library instantiates the WebSocket.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "webSocketConstructorOptions"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "webSocketConstructorOptions",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!EventHubConsumer:class",
          "docComment": "/**\n * A consumer is responsible for reading `EventData` from a specific Event Hub partition in the context of a specific consumer group. To create a consumer use the `createConsumer()` method on your `EventHubClient`.\n *\n * You can pass the below in the `options` when creating a consumer. - `ownerLevel` : A number indicating that the consumer intends to be an exclusive consumer of events resulting in other consumers to fail if their `ownerLevel` is lower or doesn't exist. - `retryOptions`: The retry options used to govern retry attempts when an issue is encountered while receiving events.\n *\n * Multiple consumers are allowed on the same partition in a consumer group. If there is a need to have an exclusive consumer for a partition in a consumer group, then specify the `ownerLevel` in the `options`. Exclusive consumers were previously referred to as \"Epoch Receivers\".\n *\n * The consumer can be used to receive messages in a batch using `receiveBatch()` or by registering handlers by using `receive()` or via an async iterable got by using `getEventIterator()`  @class\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `EventHubConsumer` class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "EventHubConsumer"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubConsumer",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#close:member(1)",
              "docComment": "/**\n * Closes the underlying AMQP receiver link. Once closed, the consumer cannot be used for any further operations. Use the `createConsumer` function on the EventHubClient to instantiate a new EventHubConsumer.\n *\n * @returns \n *\n * @throws\n *\n * {Error} Thrown if the underlying connection encounters an error while closing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "close"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#consumerGroup:member",
              "docComment": "/**\n * @property The name of the consumer group that this consumer is associated with. Events will be read only in the context of this group.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroup"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "consumerGroup",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#getEventIterator:member(1)",
              "docComment": "/**\n * Returns an async iterable that retrieves events.\n *\n * The async iterable cannot indicate that it is done. When using `for await (let event of consumer.getEventIterator()) {}` to iterate over the events returned by the async iterable, take care to exit the for loop after receiving the desired number of messages, or provide an `AbortSignal` to control when to exit the loop.\n *\n * @param  - [options] A set of options to apply to an event iterator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getEventIterator"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventIteratorOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableIterator"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ReceivedEventData"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getEventIterator"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#isClosed:member",
              "docComment": "/**\n * @property Returns `true` if the consumer is closed. This can happen either because the consumer itself has been closed or the client that created it has been closed.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "isClosed"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isClosed",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#isReceivingMessages:member",
              "docComment": "/**\n * Indicates whether the consumer is currently receiving messages or not. When this returns true, new `receive()` or `receiveBatch()` calls cannot be made.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "isReceivingMessages"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isReceivingMessages",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#lastEnqueuedEventInfo:member",
              "docComment": "/**\n * @property The last enqueued event information. This property will only be enabled when `trackLastEnqueuedEventInfo` option is set to true in the `client.createConsumer()` method.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "lastEnqueuedEventInfo"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "LastEnqueuedEventInfo"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lastEnqueuedEventInfo",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#ownerLevel:member",
              "docComment": "/**\n * @property The owner level associated with an exclusive consumer; for a non-exclusive consumer, this value will be null or undefined.\n *\n * When provided, the owner level indicates that a consumer is intended to be the exclusive receiver of events for the requested partition and the associated consumer group. When multiple consumers exist for the same partition/consumer group pair, then the ones with lower or no `ownerLevel` will get a `ReceiverDisconnectedError` during the next attempted receive operation.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ownerLevel"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ownerLevel",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#partitionId:member",
              "docComment": "/**\n * @property The identifier of the Event Hub partition that this consumer is associated with. Events will be read only from this partition.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#receive:member(1)",
              "docComment": "/**\n * Starts receiving events from the service and calls the user provided message handler for each event. Returns an object that can be used to query the state of the receiver and to stop receiving events as well.\n *\n * @param  - onMessage The message handler to receive event data objects.\n *\n * @param  - onError The error handler for errora that can occur when receiving events.\n *\n * @param  - abortSignal An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n *\n * @returns ReceiveHandler - An object that provides a mechanism to stop receiving more messages.\n *\n * @throws\n *\n * {AbortError} Thrown if the operation is cancelled via the abortSignal.\n *\n * @throws\n *\n * {TypeError} Thrown if a required parameter is missing.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection or receiver has been closed. Create a new EventHubConsumer using the EventHubClient createConsumer method.\n *\n * @throws\n *\n * {Error} Thrown if the receiver is already receiving messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "receive"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "onMessage"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "OnMessage"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "onError"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "OnError"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReceiveHandler"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "onMessage",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "onError",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "abortSignal",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "receive"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubConsumer#receiveBatch:member(1)",
              "docComment": "/**\n * Returns a promise that resolves to an array of events received from the service.\n *\n * @param  - maxMessageCount The maximum number of messages to receive.\n *\n * @param  - maxWaitTimeInSeconds The maximum amount of time to wait to build up the requested message count; If not provided, it defaults to 60 seconds.\n *\n * @param  - abortSignal An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n *\n * @returns Promise<ReceivedEventData[]>.\n *\n * @throws\n *\n * {AbortError} Thrown if the operation is cancelled via the abortSignal.\n *\n * @throws\n *\n * {MessagingError} Thrown if an error is encountered while receiving a message.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection or receiver has been closed. Create a new EventHubConsumer using the EventHubClient createConsumer method.\n *\n * @throws\n *\n * {Error} Thrown if the receiver is already receiving messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "receiveBatch"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "maxMessageCount"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "maxWaitTimeInSeconds"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ReceivedEventData"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 18
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxMessageCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxWaitTimeInSeconds",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "abortSignal",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "receiveBatch"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventHubConsumerOptions:interface",
          "docComment": "/**\n * The set of options to configure the behavior of an `EventHubConsumer`. These can be specified when creating the consumer using the `createConsumer` method. - `ownerLevel` : A number indicating that the consumer intends to be an exclusive consumer of events resulting in other consumers to fail if their `ownerLevel` is lower or doesn't exist. - `retryOptions`: The retry options used to govern retry attempts when an issue is encountered while receiving events. A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * Example usage:\n * ```js\n * {\n *     retryOptions: {\n *         maxRetries: 4\n *     },\n *     trackLastEnqueuedEventInfo: false\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventHubConsumerOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubConsumerOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubConsumerOptions#ownerLevel:member",
              "docComment": "/**\n * @property The owner level associated with an exclusive consumer.\n *\n * When provided, the owner level indicates that a consumer is intended to be the exclusive receiver of events for the requested partition and the associated consumer group. When multiple consumers exist for the same partition/consumer group pair, then the ones with lower or no `ownerLevel` will get a `ReceiverDisconnectedError` during the next attempted receive operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ownerLevel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ownerLevel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubConsumerOptions#retryOptions:member",
              "docComment": "/**\n * @property The retry options used to govern retry attempts when an issue is encountered while receiving events. If no value is provided here, the retry options set when creating the `EventHubClient` is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "retryOptions"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryOptions"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "retryOptions",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubConsumerOptions#trackLastEnqueuedEventInfo:member",
              "docComment": "/**\n * @property Indicates whether or not the consumer should request information on the last enqueued event on its associated partition, and track that information as events are received.\n *\n * When information about the partition's last enqueued event is being tracked, each event received from the Event Hubs service will carry metadata about the partition that it otherwise would not. This results in a small amount of additional network bandwidth consumption that is generally a favorable trade-off when considered against periodically making requests for partition properties using the Event Hub client.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "trackLastEnqueuedEventInfo"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "trackLastEnqueuedEventInfo",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!EventHubProducer:class",
          "docComment": "/**\n * A producer responsible for sending events to an Event Hub. To create a producer use the `createProducer()` method on your `EventHubClient`. You can pass the below in the `options` when creating a producer. - `partitionId` : The identifier of the partition that the producer can be bound to. - `retryOptions` : The retry options used to govern retry attempts when an issue is encountered while sending events. A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * If `partitionId` is specified when creating a producer, all event data sent using the producer will be sent to the specified partition. Otherwise, they are automatically routed to an available partition by the Event Hubs service.\n *\n * Automatic routing of partitions is recommended because: - The sending of events will be highly available. - The event data will be evenly distributed among all available partitions.\n *\n * @class\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `EventHubProducer` class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "EventHubProducer"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubProducer",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubProducer#close:member(1)",
              "docComment": "/**\n * Closes the underlying AMQP sender link. Once closed, the producer cannot be used for any further operations. Use the `createProducer` function on the EventHubClient to instantiate a new EventHubProducer.\n *\n * @returns \n *\n * @throws\n *\n * {Error} Thrown if the underlying connection encounters an error while closing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "close"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubProducer#createBatch:member(1)",
              "docComment": "/**\n * Creates an instance of `EventDataBatch` to which one can add events until the maximum supported size is reached. The batch can be passed to the `send()` method of the `EventHubProducer` to be sent to Azure Event Hubs.\n *\n * @param  - options A set of options to configure the behavior of the batch. - `partitionKey` : A value that is hashed to produce a partition assignment. Not applicable if the `EventHubProducer` was created using a `partitionId`. - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached. - `abortSignal` : A signal the request to cancel the send operation.\n *\n * @returns Promise<EventDataBatch>\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "createBatch"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "BatchOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventDataBatch"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "createBatch"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventHubProducer#isClosed:member",
              "docComment": "/**\n * @property Returns `true` if either the producer or the client that created it has been closed.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "isClosed"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isClosed",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventHubProducer#send:member(1)",
              "docComment": "/**\n * Send one or more of events to the associated Event Hub.\n *\n * @param  - eventData An individual `EventData` object, or an array of `EventData` objects or an instance of `EventDataBatch`.\n *\n * @param  - options The set of options that can be specified to influence the way in which events are sent to the associated Event Hub. - `partitionKey` : A value that is hashed to produce a partition assignment. Not applicable if the `EventHubProducer` was created using a `partitionId`. - `abortSignal` : A signal the request to cancel the send operation.\n *\n * @returns Promise<void>\n *\n * @throws\n *\n * {AbortError} Thrown if the operation is cancelled via the abortSignal.\n *\n * @throws\n *\n * {MessagingError} Thrown if an error is encountered while sending a message.\n *\n * @throws\n *\n * {TypeError} Thrown if a required parameter is missing.\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection or sender has been closed.\n *\n * @throws\n *\n * {Error} Thrown if a partitionKey is provided when the producer was created with a partitionId.\n *\n * @throws\n *\n * {Error} Thrown if batch was created with partitionKey different than the one provided in the options. Create a new producer using the EventHubClient createProducer method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "send"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "eventData"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventData"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "EventData"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "EventDataBatch"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "SendOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventData",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "send"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventHubProducerOptions:interface",
          "docComment": "/**\n * The set of options to configure the behavior of an `EventHubProducer`. These can be specified when creating the producer via the `createProducer` method. - `partitionId` : The string identifier of the partition that the producer can be bound to. - `retryOptions` : The retry options used to govern retry attempts when an issue is encountered while sending events. A simple usage can be `{ \"maxRetries\": 4 }`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventHubProducerOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubProducerOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubProducerOptions#partitionId:member",
              "docComment": "/**\n * @property The identifier of the partition that the producer will be bound to. If a value is provided, all events sent using the producer will reach the same partition. If no value is provided, the service will determine the partition to which the event will be sent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubProducerOptions#retryOptions:member",
              "docComment": "/**\n * @property The retry options used to govern retry attempts when an issue is encountered while sending events. If no value is provided here, the retry options set when creating the `EventHubClient` is used. Hello {@link core-amqp#RetryOptions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "retryOptions"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryOptions"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "retryOptions",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventHubProperties:interface",
          "docComment": "/**\n * Describes the runtime information of an Event Hub.  @interface HubRuntimeInformation\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventHubProperties"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventHubProperties",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubProperties#createdAt:member",
              "docComment": "/**\n * @property The date and time the hub was created in UTC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "createdAt"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "createdAt",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubProperties#partitionIds:member",
              "docComment": "/**\n * @property The slice of string partition identifiers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionIds"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionIds",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventHubProperties#path:member",
              "docComment": "/**\n * @property The name of the event hub.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "path"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventIteratorOptions:interface",
          "docComment": "/**\n * Options to pass when creating an async iteratable using the `getEventIterator()` method on the `EventHubConsumer`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventIteratorOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventIteratorOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventIteratorOptions#abortSignal:member",
              "docComment": "/**\n * An implementation of the `AbortSignalLike` interface to signal the `EventIterator` to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "abortSignal",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!EventPosition:class",
          "docComment": "/**\n * Represents the position of an event in an Event Hub partition, typically used in the creation of an `EventHubConsumer` to specify the position in the partition to begin receiving events from.\n *\n * Make use of the below static helpers to create an instance of `EventPosition` - `fromOffset()` - `fromSequenceNumber()` - `fromEnqueuedTime()` - `earliest()` - `latest()`  @class\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `EventPosition` class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "EventPosition"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventPosition",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventPosition.earliest:member(1)",
              "docComment": "/**\n * Gets an instance of `EventPosition` corresponding to the location of the the first event present in the partition. Use this position to begin receiving from the first event that was enqueued in the partition which has not expired due to the retention policy.\n *\n * @returns EventPosition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "earliest"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "EventPosition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "earliest"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventPosition#enqueuedTime:member",
              "docComment": "/**\n * @property The enqueued time of the event identified by this position. Expected to be undefined if the position is just created from a sequence number or an offset.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "enqueuedTime"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": " | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enqueuedTime",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventPosition.fromEnqueuedTime:member(1)",
              "docComment": "/**\n * Gets an instance of `EventPosition` corresponding to a specific date and time within the partition to begin seeking an event; the event enqueued after the requested `enqueuedTime` will become the current position.\n *\n * @param  - enqueuedTime The date and time, in UTC, from which the next available event should be chosen.\n *\n * @returns EventPosition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "fromEnqueuedTime"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "enqueuedTime"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": " | number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventPosition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enqueuedTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "name": "fromEnqueuedTime"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventPosition.fromOffset:member(1)",
              "docComment": "/**\n * Gets an instance of `EventPosition` corresponding to the event in the partition at the provided offset.\n *\n * @param  - offset The offset of an event with respect to its relative position in the partition.\n *\n * @param  - isInclusive If true, the specified event is included; otherwise the next event is returned. Default: `false`.\n *\n * @returns EventPosition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "fromOffset"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "isInclusive"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventPosition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "isInclusive",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "fromOffset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventPosition.fromSequenceNumber:member(1)",
              "docComment": "/**\n * Gets an instance of `EventPosition` corresponding to the event in the partition having a specified sequence number associated with it.\n *\n * @param  - sequenceNumber The sequence number assigned to an event when it was enqueued in the partition.\n *\n * @param  - isInclusive If true, event with the `sequenceNumber` is included; otherwise the next event in sequence will be received. Default `false`.\n *\n * @returns EventPosition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "fromSequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "isInclusive"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventPosition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sequenceNumber",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "isInclusive",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "fromSequenceNumber"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventPosition#isInclusive:member",
              "docComment": "/**\n * @property Indicates if the specified offset is inclusive of the event which it identifies. This information is only relevent if the event position was identified by an offset or sequence number. Default value: `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "isInclusive"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isInclusive",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventPosition.latest:member(1)",
              "docComment": "/**\n * Gets an instance of `EventPosition` corresponding to the end of the partition, where no more events are currently enqueued. Use this position to begin receiving from the next event to be enqueued in the partion after an ``EventHubConsumer`` is created with this position.\n *\n * @returns EventPosition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static "
                },
                {
                  "kind": "Reference",
                  "text": "latest"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "EventPosition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "latest"
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventPosition#offset:member",
              "docComment": "/**\n * @property The offset of the event identified by this position. Expected to be undefined if the position is just created from a sequence number or an enqueued time.\n *\n * The offset is the relative position for an event in the context of the partition. The offset should not be considered a stable value. The same offset may refer to a different event as events reach the age limit for retention and are no longer visible within the partition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number | \"@latest\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventPosition#sequenceNumber:member",
              "docComment": "/**\n * @property The sequence number of the event identified by this poistion. Expected to be undefined if the position is just created from an offset or enqueued time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!EventProcessor:class",
          "docComment": "/**\n * Event Processor based applications consist of one or more instances of EventProcessor which have been configured to consume events from the same Event Hub and consumer group. They balance the workload across different instances by distributing the partitions to be processed among themselves. They also allow the user to track progress when events are processed using checkpoints.\n *\n * A checkpoint is meant to represent the last successfully processed event by the user from a particular partition of a consumer group in an Event Hub instance.\n *\n * You need the below to create an instance of `EventProcessor` - The name of the consumer group from which you want to process events - An instance of `EventHubClient` class that was created for the Event Hub instance. - A user implemented class that extends the `PartitionProcessor` class. To get started, you can use the base class `PartitionProcessor` which simply logs the incoming events. To provide your code to process incoming events, extend this class and override the `processEvents()` method. For example:\n * ```js\n * class SamplePartitionProcessor extends PartitionProcessor {\n *     async processEvents(events, partitionContext) {\n *        // user code to process events here\n *        // use `partitionContext` property to get information on the partition\n *        // use `partitionContext.updateCheckpoint()` method to update checkpoints as needed\n *     }\n * }\n * ```\n *\n * - An instance of `PartitionManager`. To get started, you can pass an instance of `InMemoryPartitionManager`. For production, choose an implementation that will store checkpoints and partition ownership details to a durable store. Implementations of `PartitionManager` can be found on npm by searching for packages with the prefix &commat;azure/eventhub-checkpointstore-.\n *\n * @class EventProcessor\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "EventProcessor"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventProcessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/event-hubs!EventProcessor:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EventProcessor` class\n *\n * @param  - consumerGroupName The name of the consumer group from which you want to process events.\n *\n * @param  - eventHubClient An instance of `EventHubClient` that was created for the Event Hub instance.\n *\n * @param  - PartitionProcessorClass A user-provided class that extends the `PartitionProcessor` class. This class will be responsible for processing and checkpointing events.\n *\n * @param  - partitionManager An instance of `PartitionManager`. To get started, you can pass an instance of `InMemoryPartitionManager`. For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.\n *\n * @param  - options A set of options to configure the Event Processor - `maxBatchSize` : The max size of the batch of events passed each time to user code for processing. - `maxWaitTimeInSeconds` : The maximum amount of time to wait to build up the requested message count before passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "eventHubClient"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventHubClient"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionProcessorClass"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionProcessor"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionManager"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionManager"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventProcessorOptions"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "consumerGroupName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "eventHubClient",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "PartitionProcessorClass",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "partitionManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 17
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 20,
                    "endIndex": 21
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!EventProcessor#id:member",
              "docComment": "/**\n * The unique identifier for the EventProcessor.\n *\n * @return {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "id"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventProcessor#start:member(1)",
              "docComment": "/**\n * Starts the `EventProcessor`. Based on the number of instances of `EventProcessor` that are running for the same consumer group, the partitions are distributed among these instances to process events.\n *\n * For each partition, the user provided `PartitionProcessor` is instantiated.\n *\n * Subsequent calls to start will be ignored if this event processor is already running. Calling `start()` after `stop()` is called will restart this event processor.\n *\n * @return {void}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "start"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!EventProcessor#stop:member(1)",
              "docComment": "/**\n * Stops processing events for all partitions owned by this event processor. All `PartitionProcessor` will be shutdown and any open resources will be closed.\n *\n * Subsequent calls to stop will be ignored if the event processor is not running.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stop"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!EventProcessorOptions:interface",
          "docComment": "/**\n * A set of options to pass to the constructor of `EventProcessor`. You can specify - `maxBatchSize`: The max size of the batch of events passed each time to user code for processing. - `maxWaitTimeInSeconds`: The maximum amount of time to wait to build up the requested message count before passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n *\n * Example usage with default values:\n * ```ts\n * {\n *     maxBatchSize: 1,\n *     maxWaitTimeInSeconds: 60\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventProcessorOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventProcessorOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventProcessorOptions#maxBatchSize:member",
              "docComment": "/**\n * The max size of the batch of events passed each time to user code for processing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxBatchSize"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxBatchSize",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!EventProcessorOptions#maxWaitTimeInSeconds:member",
              "docComment": "/**\n * The maximum amount of time to wait to build up the requested message count before passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxWaitTimeInSeconds"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxWaitTimeInSeconds",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!InMemoryPartitionManager:class",
          "docComment": "/**\n * The `EventProcessor` relies on a `PartitionManager` to store checkpoints and handle partition ownerships. `InMemoryPartitionManager` is simple partition manager that stores checkpoints and partition ownerships in memory of your program.\n *\n * You can use the `InMemoryPartitionManager` to get started with using the `EventProcessor`. But in production, you should choose an implementation of the `PartitionManager` interface that will store the checkpoints and partition ownerships to a durable store instead.\n *\n * @class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "InMemoryPartitionManager"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "PartitionManager"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InMemoryPartitionManager",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!InMemoryPartitionManager#claimOwnership:member(1)",
              "docComment": "/**\n * Claim ownership of a list of partitions. This will return the list of partitions that were owned successfully.\n *\n * @param  - partitionOwnership The list of partition ownership this instance is claiming to own.  @return A list partitions this instance successfully claimed ownership.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "claimOwnership"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "partitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PartitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "partitionOwnership",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "name": "claimOwnership"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!InMemoryPartitionManager#listOwnership:member(1)",
              "docComment": "/**\n * Get the list of all existing partition ownership from the underlying data store. Could return empty results if there are is no existing ownership information.\n *\n * @param  - eventHubName The event hub name.\n *\n * @param  - consumerGroupName The consumer group name.  @return Partition ownership details of all the partitions that have/had an owner..\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "listOwnership"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PartitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventHubName",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "consumerGroupName",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "listOwnership"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!InMemoryPartitionManager#updateCheckpoint:member(1)",
              "docComment": "/**\n * Updates the checkpoint in the data store for a partition.\n *\n * @param  - checkpoint The checkpoint.  @return The new eTag on successful update\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "updateCheckpoint"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "checkpoint"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Checkpoint"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "checkpoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "updateCheckpoint"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!LastEnqueuedEventInfo:interface",
          "docComment": "/**\n * A set of information about the last enqueued event of a partition, as observed by the consumer as events are received from the Event Hubs service  @interface LastEnqueuedEventInfo\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "LastEnqueuedEventInfo"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LastEnqueuedEventInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!LastEnqueuedEventInfo#enqueuedTime:member",
              "docComment": "/**\n * @property The date and time, in UTC, that the last event was enqueued into the Event Hub partition from which this event was received.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "enqueuedTime"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enqueuedTime",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!LastEnqueuedEventInfo#offset:member",
              "docComment": "/**\n * @property The offset of the event that was last enqueued into the Event Hub partition from which this event was received.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!LastEnqueuedEventInfo#retrievalTime:member",
              "docComment": "/**\n * @property The date and time, in UTC, that the last event was retrieved from the Event Hub partition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "retrievalTime"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "retrievalTime",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!LastEnqueuedEventInfo#sequenceNumber:member",
              "docComment": "/**\n * @property The sequence number of the event that was last enqueued into the Event Hub partition from which this event was received.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/event-hubs!OnError:type",
          "docComment": "/**\n * Describes the error handler signature.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "OnError"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "error"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "MessagingError"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Error"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "OnError",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/event-hubs!OnMessage:type",
          "docComment": "/**\n * Describes the message handler signature.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "OnMessage"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "eventData"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ReceivedEventData"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "OnMessage",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!PartitionContext:class",
          "docComment": "/**\n * `PartitionContext` holds information on the partition, consumer group and event hub being processed by the `EventProcessor`. It also allows users to update checkpoints via the `updateCheckpoint` method.\n *\n * User is never meant to create `PartitionContext` directly. It is only passed to user code by the `EventProcessor`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "PartitionContext"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PartitionContext",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/event-hubs!PartitionContext:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PartitionContext` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionManager"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionManager"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "eventProcessorId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventHubName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "consumerGroupName",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "partitionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "partitionManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  }
                },
                {
                  "parameterName": "eventProcessorId",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!PartitionContext#consumerGroupName:member",
              "docComment": "/**\n * @property The consumer group name\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "consumerGroupName",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!PartitionContext#eventHubName:member",
              "docComment": "/**\n * @property The event hub name\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventHubName",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!PartitionContext#partitionId:member",
              "docComment": "/**\n * @property The identifier of the Event Hub partition\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!PartitionContext#updateCheckpoint:member(1)",
              "docComment": "/**\n * Updates the checkpoint for the partition associated with the `PartitionContext`.\n *\n * A checkpoint is meant to represent the last successfully processed event by the user from a particular partition of a consumer group in an Event Hub instance.\n *\n * @param  - eventData The event that you want to update the checkpoint with.  @return Promise<void>\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "updateCheckpoint"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "eventData"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "ReceivedEventData"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventData",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "updateCheckpoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!PartitionContext#updateCheckpoint:member(2)",
              "docComment": "/**\n * Updates the checkpoint for the partition associated with the `PartitionContext`.\n *\n * A checkpoint is meant to represent the last successfully processed event by the user from a particular partition of a consumer group in an Event Hub instance.\n *\n * @param  - sequenceNumber The sequence number of the event that you want to update the checkpoint with.\n *\n * @param  - offset The offset of the event that you want to update the checkpoint with.  @return Promise<void>.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "updateCheckpoint"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "sequenceNumber",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "updateCheckpoint"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!PartitionManager:interface",
          "docComment": "/**\n * A Partition manager stores and retrieves partition ownership information and checkpoint details for each partition in a given consumer group of an event hub instance.\n *\n * Users are not meant to implement an `PartitionManager`. Users are expected to choose existing implementations of this interface, instantiate it, and pass it to the constructor of `EventProcessor`.\n *\n * To get started, you can use the `InMemoryPartitionManager` which will store the relevant information in memory. But in production, you should choose an implementation of the `PartitionManager` interface that will store the checkpoints and partition ownerships to a durable store instead.\n *\n * Implementations of `PartitionManager` can be found on npm by searching for packages with the prefix &commat;azure/eventhub-checkpointstore-.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "PartitionManager"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PartitionManager",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/event-hubs!PartitionManager#claimOwnership:member(1)",
              "docComment": "/**\n * Called to claim ownership of a list of partitions. This will return the list of partitions that were owned successfully.\n *\n * @param  - partitionOwnership The list of partition ownership this instance is claiming to own.  @return A list of partitions this instance successfully claimed ownership.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "claimOwnership"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "partitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PartitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "partitionOwnership",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "name": "claimOwnership"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/event-hubs!PartitionManager#listOwnership:member(1)",
              "docComment": "/**\n * Called to get the list of all existing partition ownership from the underlying data store. Could return empty results if there are is no existing ownership information.\n *\n * @param  - eventHubName The event hub name.\n *\n * @param  - consumerGroupName The consumer group name.  @return A list of partition ownership details of all the partitions that have/had an owner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "listOwnership"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PartitionOwnership"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventHubName",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "consumerGroupName",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "listOwnership"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/event-hubs!PartitionManager#updateCheckpoint:member(1)",
              "docComment": "/**\n * Updates the checkpoint in the data store for a partition.\n *\n * @param  - checkpoint The checkpoint.  @return The new eTag on successful update.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "updateCheckpoint"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "checkpoint"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Checkpoint"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "checkpoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "updateCheckpoint"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!PartitionOwnership:interface",
          "docComment": "/**\n * An interface representing the details on which instance of a `EventProcessor` owns processing of a given partition from a consumer group of an Event Hub instance.\n *\n * **Note**: This is used internally by the `EventProcessor` and user never has to create it directly.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "PartitionOwnership"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PartitionOwnership",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#consumerGroupName:member",
              "docComment": "/**\n * @property The consumer group name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "consumerGroupName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "consumerGroupName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#eTag:member",
              "docComment": "/**\n * @property The unique identifier for the operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "eTag"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eTag",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#eventHubName:member",
              "docComment": "/**\n * @property The event hub name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventHubName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#lastModifiedTimeInMS:member",
              "docComment": "/**\n * @property The last modified time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "lastModifiedTimeInMS"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lastModifiedTimeInMS",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#offset:member",
              "docComment": "/**\n * @property The offset of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#ownerId:member",
              "docComment": "/**\n * @property The unique identifier of the event processor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ownerId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ownerId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#ownerLevel:member",
              "docComment": "/**\n * @property The owner level\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ownerLevel"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ownerLevel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#partitionId:member",
              "docComment": "/**\n * @property The identifier of the Event Hub partition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionOwnership#sequenceNumber:member",
              "docComment": "/**\n * @property The sequence number of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!PartitionProcessor:class",
          "docComment": "/**\n * The `PartitionProcessor` is responsible for processing events received from Event Hubs when using `EventProcessor`\n *\n * The EventProcessor creates a new instance of the PartitionProcessor for each partition of the event hub it starts processing. When you extend the `PartitionProcessor` in order to customize it as you see fit, - Override the `processEvents()` method to add the code to process the received events. This is also a good place to update the checkpoints using the `updateCheckpoint()` method - Optionally override the `processError()` method to handle any error that might have occurred when processing the events. - Optionally override the `initialize()` method to implement any set up related tasks you would want to carry out before starting to receive events from the partition - Optionally override the `close()` method to implement any tear down or clean up tasks you would want to carry out.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "PartitionProcessor"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PartitionProcessor",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!PartitionProcessor#close:member(1)",
              "docComment": "/**\n * This method is called before the partition processor is closed by the EventProcessor.\n *\n * @param  - reason The reason for closing this partition processor.\n *\n * @param  - partitionContext An object that provides information specific to the partition being processed. Call the `updateCheckpoint` method to update and store the checkpoint for this partition. This object will have properties like the `partitionId`, `eventHubName` and `consumerGroupName`.  @return {Promise<void>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "close"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "reason"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "CloseReason"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionContext"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionContext"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "partitionContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!PartitionProcessor#initialize:member(1)",
              "docComment": "/**\n * This method is called when the `EventProcessor` takes ownership of a new partition and before any events are received.\n *\n * @param  - partitionContext An object that provides information specific to the partition being processed. Call the `updateCheckpoint` method to update and store the checkpoint for this partition. This object will have properties like the `partitionId`, `eventHubName` and `consumerGroupName`.  @return {Promise<void>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "initialize"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "partitionContext"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionContext"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "partitionContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "initialize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!PartitionProcessor#processError:member(1)",
              "docComment": "/**\n * This method is called when an error occurs while receiving events from Event Hubs.\n *\n * @param  - error The error to be processed.\n *\n * @param  - partitionContext An object that provides information specific to the partition being processed. Call the `updateCheckpoint` method to update and store the checkpoint for this partition. This object will have properties like the `partitionId`, `eventHubName` and `consumerGroupName`.  @return {Promise<void>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "processError"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "error"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Error"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionContext"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionContext"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "partitionContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "processError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!PartitionProcessor#processEvents:member(1)",
              "docComment": "/**\n * This method is called when new events are received.\n *\n * This is also a good place to update checkpoints as appropriate.\n *\n * @param  - events The received events to be processed.\n *\n * @param  - partitionContext An object that provides information specific to the partition being processed. Call the `updateCheckpoint` method to update and store the checkpoint for this partition. This object will have properties like the `partitionId`, `eventHubName` and `consumerGroupName`.  @return {Promise<void>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "processEvents"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "events"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "ReceivedEventData"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "partitionContext"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PartitionContext"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "partitionContext",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "processEvents"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!PartitionProperties:interface",
          "docComment": "/**\n * Describes the runtime information of an EventHub Partition.  @interface PartitionProperties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "PartitionProperties"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PartitionProperties",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionProperties#beginningSequenceNumber:member",
              "docComment": "/**\n * @property The starting sequence number of the partition's message log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "beginningSequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beginningSequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionProperties#eventHubName:member",
              "docComment": "/**\n * @property The name of the Event Hub.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "eventHubName"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventHubName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionProperties#lastEnqueuedOffset:member",
              "docComment": "/**\n * @property The offset of the last enqueued message in the partition's message log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "lastEnqueuedOffset"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lastEnqueuedOffset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionProperties#lastEnqueuedSequenceNumber:member",
              "docComment": "/**\n * @property The last sequence number of the partition's message log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "lastEnqueuedSequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lastEnqueuedSequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionProperties#lastEnqueuedTimeUtc:member",
              "docComment": "/**\n * @property The time of the last enqueued message in the partition's message log in UTC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "lastEnqueuedTimeUtc"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lastEnqueuedTimeUtc",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!PartitionProperties#partitionId:member",
              "docComment": "/**\n * @property Identifier of the partition within the Event Hub.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!ReceivedEventData:interface",
          "docComment": "/**\n * Describes the structure of an event received from Event Hub.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "ReceivedEventData"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ReceivedEventData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#body:member",
              "docComment": "/**\n * @property The message body that needs to be sent or is received.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "body"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#enqueuedTimeUtc:member",
              "docComment": "/**\n * @property The enqueued time of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "enqueuedTimeUtc"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enqueuedTimeUtc",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#offset:member",
              "docComment": "/**\n * @property The offset of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#partitionKey:member",
              "docComment": "/**\n * @property When specified Event Hub will hash this to a partitionId. It guarantees that messages end up in a specific partition on the event hub.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionKey"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionKey",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#properties:member",
              "docComment": "/**\n * @property The application specific properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "properties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#sequenceNumber:member",
              "docComment": "/**\n * @property The sequence number of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sequenceNumber"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequenceNumber",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!ReceivedEventData#systemProperties:member",
              "docComment": "/**\n * @property The properties set by the service.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "systemProperties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "systemProperties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/event-hubs!ReceiveHandler:class",
          "docComment": "/**\n * Describes the receive handler object that is returned from the receive() method with handlers. The ReceiveHandler is used to stop receiving more messages.  @class ReceiveHandler\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `ReceiveHandler` class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "ReceiveHandler"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ReceiveHandler",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!ReceiveHandler#consumerGroup:member",
              "docComment": "/**\n * @property The consumer group from which the handler is receiving events.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "consumerGroup"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "consumerGroup",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!ReceiveHandler#isReceiverOpen:member",
              "docComment": "/**\n * @property Indicates whether the receiver is connected/open. `true` - is open; `false` otherwise.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "isReceiverOpen"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isReceiverOpen",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/event-hubs!ReceiveHandler#partitionId:member",
              "docComment": "/**\n * @property The partitionId from which the handler is receiving events.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "partitionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionId",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@azure/event-hubs!ReceiveHandler#stop:member(1)",
              "docComment": "/**\n * Stops the underlying EventHubReceiver from receiving more messages.\n *\n * @returns Promise<void>\n *\n * @throws\n *\n * {Error} Thrown if the underlying connection encounters an error while closing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stop"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/event-hubs!SendOptions:interface",
          "docComment": "/**\n * The set of options to configure the `send` operation on the `EventHubProducer`. - `partitionKey` : A value that is hashed to produce a partition assignment. - `abortSignal` : A signal the request to cancel the send operation.\n *\n * Example usage:\n * ```js\n * {\n *     partitionKey: 'foo'\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "SendOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SendOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!SendOptions#abortSignal:member",
              "docComment": "/**\n * @property An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation. For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "abortSignal"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignalLike"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "abortSignal",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/event-hubs!SendOptions#partitionKey:member",
              "docComment": "/**\n * @property A value that is hashed to produce a partition assignment. It guarantees that messages with the same partitionKey end up in the same partition. Specifying this will throw an error if the producer was created using a `paritionId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "partitionKey"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "partitionKey",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
